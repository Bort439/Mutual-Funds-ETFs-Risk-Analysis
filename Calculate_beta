##### Risk Analysis for each ETF
alpha, beta, r-squared, standard deviation, and the Sharpe ratio

ETFs.fund_return_ytd.plot()
ETFs.category_return_ytd.plot()
plt.legend()
plt.title('ETF vs Category YTD')
##### Already from the graph we can assume that the beta will be distant from 1


X = ETFs.fund_return_ytd

Y = ETFs.category_return_ytd

def linear_reg(x,y):
    x = sm.add_constant(x)
    model = regression.linear_model.OLS(y,x).fit()
    return model.params[0], model.params[1]

alpha, beta = linear_reg(X,Y)
print('alpha: ' + str(alpha))
print('beta: ' + str(beta))

X2 = np.linspace(X.min(), X.max(), 100)
Y_hat = X2 * beta + alpha
plt.figure(figsize=(10,7))
plt.scatter(X, Y) # Plot the raw data
plt.xlabel("Category Return")
plt.ylabel("Mutual Funds Return")

plt.plot(X2, Y_hat)
plt.show()

avg_5y= ETFs.fund_return_5years.median()
print(avg_5y)
avg_10y= ETFs.fund_return_10years.median()
print(avg_10y)
ETFs.fund_return_5years.fillna(value=avg_5y, inplace = True)
ETFs.fund_return_10years.fillna(value=avg_10y, inplace = True)

ETFs.fund_return_1year.plot()
ETFs.category_return_1year.plot()
plt.legend()
plt.title('ETF vs Category 1Y)


X = ETFs.fund_return_1year

Y = ETFs.category_return_1year

def linear_reg(x,y):
    x = sm.add_constant(x)
    model = regression.linear_model.OLS(y,x).fit()
    return model.params[0], model.params[1]

alpha, beta = linear_reg(X,Y)
print('alpha: ' + str(alpha))
print('beta: ' + str(beta))

ETFs.fund_return_5years.plot()
ETFs.category_return_5years.plot()
plt.legend()
plt.title('ETF vs Category 5Y')


X = ETFs.fund_return_5years

Y = ETFs.category_return_5years

def linear_reg(x,y):
    x = sm.add_constant(x)
    model = regression.linear_model.OLS(y,x).fit()
    return model.params[0], model.params[1]

alpha, beta = linear_reg(X,Y)
print('alpha: ' + str(alpha))
print('beta: ' + str(beta))

ETFs.fund_return_10years.plot()
ETFs.category_return_10years.plot()
plt.legend()
plt.title('ETF vs Category 10Y')


X = ETFs.fund_return_10years

Y = ETFs.category_return_10years

def linear_reg(x,y):
    x = sm.add_constant(x)
    model = regression.linear_model.OLS(y,x).fit()
    return model.params[0], model.params[1]

alpha, beta = linear_reg(X,Y)
print('alpha: ' + str(alpha))
print('beta: ' + str(beta))

sns.regplot(y='category_return_1year', x='fund_return_1year', data = ETFs)
sns.regplot(y='category_return_10years', x='fund_return_10years', data = ETFs)
sns.regplot(y='category_return_5years', x='fund_return_1years', data = ETFs)


